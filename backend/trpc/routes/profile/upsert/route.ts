import { z } from 'zod';\nimport { publicProcedure } from '../../create-context';\nimport { Profile } from '../../../services/ScoringService';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL!;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\n\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\n\nconst profileSchema = z.object({\n  body_goal: z.enum(['lose_weight', 'gain_weight', 'maintain_weight']).optional(),\n  health_goals: z.array(z.enum(['low_sugar', 'high_protein', 'low_fat', 'keto', 'balanced'])).optional(),\n  diet_goals: z.array(z.enum(['whole_foods', 'vegan', 'carnivore', 'gluten_free', 'vegetarian', 'balanced'])).optional(),\n  lifestyle_goals: z.array(z.string()).optional().nullable(),\n});\n\nexport const profileUpsertProcedure = publicProcedure\n  .input(z.object({\n    userId: z.string().optional(),\n    profile: profileSchema\n  }))\n  .mutation(async ({ input }) => {\n    console.log('Upserting user profile:', input);\n    \n    if (!input.userId) {\n      console.log('No userId provided, skipping database save');\n      return { success: true, message: 'Profile validated but not saved (no user ID)' };\n    }\n    \n    try {\n      const { error } = await supabase\n        .from('profiles_goals')\n        .upsert({\n          user_id: input.userId,\n          body_goal: input.profile.body_goal || null,\n          health_goals: input.profile.health_goals || null,\n          diet_goals: input.profile.diet_goals || null,\n          lifestyle_goals: input.profile.lifestyle_goals || null,\n          updated_at: new Date().toISOString()\n        });\n      \n      if (error) {\n        console.error('Error upserting profile:', error);\n        throw new Error(`Database error: ${error.message}`);\n      }\n      \n      console.log('Profile upserted successfully');\n      return { success: true, message: 'Profile updated successfully' };\n      \n    } catch (error) {\n      console.error('Profile upsert failed:', error);\n      throw new Error('Failed to update profile');\n    }\n  });\n\nexport const profileGetProcedure = publicProcedure\n  .input(z.object({\n    userId: z.string()\n  }))\n  .query(async ({ input }) => {\n    console.log('Getting user profile:', input.userId);\n    \n    try {\n      const { data, error } = await supabase\n        .from('profiles_goals')\n        .select('*')\n        .eq('user_id', input.userId)\n        .single();\n      \n      if (error && error.code !== 'PGRST116') {\n        console.error('Error getting profile:', error);\n        throw new Error(`Database error: ${error.message}`);\n      }\n      \n      if (!data) {\n        console.log('No profile found, returning defaults');\n        return {\n          body_goal: 'maintain_weight' as const,\n          health_goals: ['balanced'] as const,\n          diet_goals: ['balanced'] as const,\n          lifestyle_goals: null\n        } satisfies Profile;\n      }\n      \n      console.log('Profile retrieved successfully');\n      return {\n        body_goal: data.body_goal,\n        health_goals: data.health_goals || ['balanced'],\n        diet_goals: data.diet_goals || ['balanced'],\n        lifestyle_goals: data.lifestyle_goals\n      } satisfies Profile;\n      \n    } catch (error) {\n      console.error('Profile get failed:', error);\n      throw new Error('Failed to get profile');\n    }\n  });